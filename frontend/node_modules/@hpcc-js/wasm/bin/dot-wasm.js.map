{
  "version": 3,
  "sources": ["../src-ts/__bin__/dot-wasm.ts"],
  "sourcesContent": ["import fs from \"fs\";\r\nimport * as yargs from \"yargs\";\r\nimport { hideBin } from \"yargs/helpers\";\r\nimport { Graphviz, Engine, Format, Options } from \"@hpcc-js/wasm/graphviz\";\r\n\r\nconst myYargs = yargs.default(hideBin(process.argv)) as yargs.Argv<{ vx: boolean, layout: Engine, format: Format, n: string }>;\r\nmyYargs\r\n    .usage(\"Usage: dot-wasm [options] fileOrDot\")\r\n    .demandCommand(0, 1)\r\n    .example(\"dot-wasm -K neato -T xdot ./input.dot\", \"Execute NEATO layout and outputs XDOT format.\")\r\n    .alias(\"K\", \"layout\")\r\n    .nargs(\"K\", 1)\r\n    .describe(\"K\", \"Set layout engine (circo | dot | fdp | sfdp | neato | osage | patchwork | twopi | nop | nop2). By default, dot is used.\")\r\n    .alias(\"T\", \"format\")\r\n    .nargs(\"T\", 1)\r\n    .describe(\"T\", \"Set output language to one of the supported formats (svg | dot | json | dot_json | xdot_json | plain | plain-ext). By default, svg is produced.\")\r\n    .alias(\"n\", \"neato-no-op\")\r\n    .nargs(\"n\", 1)\r\n    .describe(\"n\", \"Sets no-op flag in neato.  \\\"-n 1\\\" assumes neato nodes have already been positioned and all nodes have a pos attribute giving the positions. It then performs an optional adjustment to remove node-node overlap, depending on the value of the overlap attribute, computes the edge layouts, depending on the value of the splines attribute, and emits the graph in the appropriate format.\\n\\\"-n 2\\\" Use node positions as specified, with no adjustment to remove node-node overlaps, and use any edge layouts already specified by the pos attribute. neato computes an edge layout for any edge that does not have a pos attribute. As usual, edge layout is guided by the splines attribute.\")\r\n    .alias(\"y\", \"invert-y\")\r\n    .nargs(\"y\", 0)\r\n    .describe(\"y\", \"By default, the coordinate system used in generic output formats, such as attributed dot, extended dot, plain and plain-ext, is the standard cartesian system with the origin in the lower left corner, and with increasing y coordinates as points move from bottom to top. If the -y flag is used, the coordinate system is inverted, so that increasing values of y correspond to movement from top to bottom.\")\r\n    .nargs(\"v\", 0)\r\n    .describe(\"v\", \"Echo GraphViz library version\")\r\n    .help(\"h\")\r\n    .alias(\"h\", \"help\")\r\n    .epilog(\"https://github.com/hpcc-systems/hpcc-js-wasm\")\r\n    ;\r\n\r\nconst argv = await myYargs.argv;\r\n\r\ntry {\r\n    let dot;\r\n    if (fs.existsSync(argv._[0] as string)) {\r\n        dot = fs.readFileSync(argv._[0], \"utf8\");\r\n    } else {\r\n        dot = argv._[0] as string;\r\n    }\r\n    const graphviz = await Graphviz.load();\r\n\r\n    if (argv.v) {\r\n        console.log(`GraphViz version:  ${graphviz.version()}`);\r\n    } else if (dot) {\r\n\r\n        if (argv.n && argv.layout.trim() !== \"neato\") {\r\n            throw new Error(\"-n option is only supported with -T neato\");\r\n        }\r\n\r\n        const ext: Options = {\r\n        };\r\n        if (argv.n) {\r\n            ext.nop = parseInt(argv.n);\r\n        }\r\n        if (argv.y) {\r\n            ext.yInvert = true;\r\n        }\r\n\r\n        const response = graphviz.layout(dot, (argv.format?.trim() ?? \"svg\") as Format, (argv.layout?.trim() ?? \"dot\") as Engine, ext);\r\n        console.log(response);\r\n    } else {\r\n        throw new Error(\"'fileOrDot' is required.\");\r\n    }\r\n} catch (e: any) {\r\n    console.error(`Error:  ${e?.message}\\n`);\r\n    myYargs.showHelp();\r\n}\r\n"],
  "mappings": "0PAAA,OAAOA,OAAQ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;y7RAGf,OAAS,YAAAC,OAAyC,yBAElD,IAAMC,GAAgBC,GAAQC,GAAQ,QAAQ,IAAI,CAAC,EACnDF,GACK,MAAM,qCAAqC,EAC3C,cAAc,EAAG,CAAC,EAClB,QAAQ,wCAAyC,+CAA+C,EAChG,MAAM,IAAK,QAAQ,EACnB,MAAM,IAAK,CAAC,EACZ,SAAS,IAAK,yHAAyH,EACvI,MAAM,IAAK,QAAQ,EACnB,MAAM,IAAK,CAAC,EACZ,SAAS,IAAK,iJAAiJ,EAC/J,MAAM,IAAK,aAAa,EACxB,MAAM,IAAK,CAAC,EACZ,SAAS,IAAK;mSAAsqB,EACprB,MAAM,IAAK,UAAU,EACrB,MAAM,IAAK,CAAC,EACZ,SAAS,IAAK,mZAAmZ,EACja,MAAM,IAAK,CAAC,EACZ,SAAS,IAAK,+BAA+B,EAC7C,KAAK,GAAG,EACR,MAAM,IAAK,MAAM,EACjB,OAAO,8CAA8C,EAG1D,IAAMG,GAAO,MAAMH,GAAQ,KAE3B,GAAI,CACA,IAAII,EACAC,GAAG,WAAWF,GAAK,EAAE,CAAC,CAAW,EACjCC,EAAMC,GAAG,aAAaF,GAAK,EAAE,CAAC,EAAG,MAAM,EAEvCC,EAAMD,GAAK,EAAE,CAAC,EAElB,IAAMG,EAAW,MAAMP,GAAS,KAAI,EAEpC,GAAII,GAAK,EACL,QAAQ,IAAI,sBAAsBG,EAAS,QAAO,CAAE,EAAE,UAC/CF,EAAK,CAEZ,GAAID,GAAK,GAAKA,GAAK,OAAO,KAAI,IAAO,QACjC,MAAM,IAAI,MAAM,2CAA2C,EAG/D,IAAMI,EAAe,CAAA,EAEjBJ,GAAK,IACLI,EAAI,IAAM,SAASJ,GAAK,CAAC,GAEzBA,GAAK,IACLI,EAAI,QAAU,IAGlB,IAAMC,EAAWF,EAAS,OAAOF,EAAMD,GAAK,QAAQ,KAAI,GAAM,MAAmBA,GAAK,QAAQ,KAAI,GAAM,MAAkBI,CAAG,EAC7H,QAAQ,IAAIC,CAAQ,CACxB,KACI,OAAM,IAAI,MAAM,0BAA0B,CAElD,OAASC,EAAQ,CACb,QAAQ,MAAM,WAAWA,GAAG,OAAO;CAAI,EACvCT,GAAQ,SAAQ,CACpB",
  "names": ["fs", "Graphviz", "myYargs", "yargs_default", "hideBin", "argv", "dot", "fs", "graphviz", "ext", "response", "e"]
}
