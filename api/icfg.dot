digraph "ICFG" {
	label="ICFG";

	Node0x6170f3624570 [shape=record,color=green,label="{NodeID: 49\nFunExitBlockNode ID: 49 Exit(\{  \})\n \{fun: main\}}"];
	Node0x6170f3624310 [shape=record,color=black,label="{NodeID: 48\nIntraBlockNode ID: 48      ret i32 0, !dbg !22 \{ ln: 27  cl: 5  fl: example.c \}    \{fun: main\}}"];
	Node0x6170f3624310 -> Node0x6170f3624570[style=solid];
	Node0x6170f36240b0 [shape=record,color=blue,label="{NodeID: 47\nRetBlockNode ID: 47   %call = call i32 @test(i32 noundef %0, i32 noundef %1), !dbg !21 \{ ln: 26  cl: 5  fl: example.c \} \{fun: main\}}"];
	Node0x6170f36240b0 -> Node0x6170f3624310[style=solid];
	Node0x6170f3610ac0 [shape=record,color=red,label="{NodeID: 46\nCallBlockNode ID: 46   %call = call i32 @test(i32 noundef %0, i32 noundef %1), !dbg !21 \{ ln: 26  cl: 5  fl: example.c \} \{fun: main\}|{|<s1>0x6170f36100c0}}"];
	Node0x6170f3610ac0 -> Node0x6170f36240b0[style=solid];
	Node0x6170f3610ac0:s1 -> Node0x6170f361eb30[style=solid,color=red];
	Node0x6170f3623e00 [shape=record,color=black,label="{NodeID: 45\nIntraBlockNode ID: 45      %1 = load i32, i32* %b, align 4, !dbg !20 \{ ln: 26  cl: 12  fl: example.c \}    \{fun: main\}}"];
	Node0x6170f3623e00 -> Node0x6170f3610ac0[style=solid];
	Node0x6170f3623c40 [shape=record,color=black,label="{NodeID: 44\nIntraBlockNode ID: 44      %0 = load i32, i32* %a, align 4, !dbg !19 \{ ln: 26  cl: 10  fl: example.c \}    \{fun: main\}}"];
	Node0x6170f3623c40 -> Node0x6170f3623e00[style=solid];
	Node0x6170f3623a80 [shape=record,color=black,label="{NodeID: 43\nIntraBlockNode ID: 43      store i32 2, i32* %b, align 4, !dbg !18 \{ ln: 25  cl: 9  fl: example.c \}    \{fun: main\}}"];
	Node0x6170f3623a80 -> Node0x6170f3623c40[style=solid];
	Node0x6170f36238c0 [shape=record,color=black,label="{NodeID: 42\nIntraBlockNode ID: 42      store i32 1, i32* %a, align 4, !dbg !16 \{ ln: 24  cl: 9  fl: example.c \}    \{fun: main\}}"];
	Node0x6170f36238c0 -> Node0x6170f3623a80[style=solid];
	Node0x6170f3623700 [shape=record,color=black,label="{NodeID: 41\nIntraBlockNode ID: 41      store i32 0, i32* %retval, align 4 \{  \}    \{fun: main\}}"];
	Node0x6170f3623700 -> Node0x6170f36238c0[style=solid];
	Node0x6170f3623540 [shape=record,color=black,label="{NodeID: 40\nIntraBlockNode ID: 40   AddrPE: [69\<--70]  \n   %b = alloca i32, align 4 \{ ln: 25 fl: example.c \} \{fun: main\}}"];
	Node0x6170f3623540 -> Node0x6170f3623700[style=solid];
	Node0x6170f3623380 [shape=record,color=black,label="{NodeID: 39\nIntraBlockNode ID: 39   AddrPE: [67\<--68]  \n   %a = alloca i32, align 4 \{ ln: 24 fl: example.c \} \{fun: main\}}"];
	Node0x6170f3623380 -> Node0x6170f3623540[style=solid];
	Node0x6170f3623150 [shape=record,color=black,label="{NodeID: 38\nIntraBlockNode ID: 38   AddrPE: [65\<--66]  \n   %retval = alloca i32, align 4 \{  \} \{fun: main\}}"];
	Node0x6170f3623150 -> Node0x6170f3623380[style=solid];
	Node0x6170f3623020 [shape=record,color=yellow,label="{NodeID: 37\nFunEntryBlockNode ID: 37 Entry(\{ in line: 23 file: example.c \})\n \{fun: main\}}"];
	Node0x6170f3623020 -> Node0x6170f3610630[style=solid];
	Node0x6170f3623020 -> Node0x6170f3623150[style=solid];
	Node0x6170f3622c70 [shape=record,color=blue,label="{NodeID: 36\nRetBlockNode ID: 36   call void @svf_assert(i1 noundef zeroext %cmp2), !dbg !36 \{ ln: 15  cl: 9  fl: example.c \} \{fun: test\}}"];
	Node0x6170f3622c70 -> Node0x6170f3622b50[style=solid];
	Node0x6170f3622b50 [shape=record,color=black,label="{NodeID: 35\nIntraBlockNode ID: 35      br label %if.end, !dbg !37 \{ ln: 16  cl: 5  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f3622b50 -> Node0x6170f3622230[style=solid];
	Node0x6170f3610bd0 [shape=record,color=red,label="{NodeID: 34\nCallBlockNode ID: 34   call void @svf_assert(i1 noundef zeroext %cmp2), !dbg !36 \{ ln: 15  cl: 9  fl: example.c \} \{fun: test\}|{|<s1>0x6170f360cb80}}"];
	Node0x6170f3610bd0 -> Node0x6170f3622c70[style=solid];
	Node0x6170f3610bd0:s1 -> Node0x6170f3621630[style=solid,color=red];
	Node0x6170f36225f0 [shape=record,color=green,label="{NodeID: 33\nFunExitBlockNode ID: 33 Exit(\{ ln: 20  cl: 5  fl: example.c \})\n \{fun: test\}|{<s0>0x6170f36100c0}}"];
	Node0x6170f36225f0:s0 -> Node0x6170f36240b0[style=solid,color=blue];
	Node0x6170f3622410 [shape=record,color=black,label="{NodeID: 32\nIntraBlockNode ID: 32      %cmp2 = icmp eq i32 %4, %5, !dbg !35 \{ ln: 15  cl: 23  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f3622410 -> Node0x6170f3610bd0[style=solid];
	Node0x6170f3622230 [shape=record,color=black,label="{NodeID: 31\nIntraBlockNode ID: 31      ret i32 0, !dbg !43 \{ ln: 20  cl: 5  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f3622230 -> Node0x6170f36225f0[style=solid];
	Node0x6170f3622050 [shape=record,color=black,label="{NodeID: 30\nIntraBlockNode ID: 30      %5 = load i32, i32* %y, align 4, !dbg !34 \{ ln: 15  cl: 26  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f3622050 -> Node0x6170f3622410[style=solid];
	Node0x6170f3621be0 [shape=record,color=blue,label="{NodeID: 29\nRetBlockNode ID: 29   call void @svf_assert(i1 noundef zeroext %cmp4), !dbg !42 \{ ln: 18  cl: 9  fl: example.c \} \{fun: test\}}"];
	Node0x6170f3621be0 -> Node0x6170f3621ac0[style=solid];
	Node0x6170f361faa0 [shape=record,color=black,label="{NodeID: 12\nIntraBlockNode ID: 12      %cmp = icmp sgt i32 %0, %1, !dbg !28 \{ ln: 12  cl: 11  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f361faa0 -> Node0x6170f361fc80[style=solid];
	Node0x6170f361f8c0 [shape=record,color=black,label="{NodeID: 11\nIntraBlockNode ID: 11      %1 = load i32, i32* %b.addr, align 4, !dbg !27 \{ ln: 12  cl: 13  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f361f8c0 -> Node0x6170f361faa0[style=solid];
	Node0x6170f361f6e0 [shape=record,color=black,label="{NodeID: 10\nIntraBlockNode ID: 10      %0 = load i32, i32* %a.addr, align 4, !dbg !25 \{ ln: 12  cl: 9  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f361f6e0 -> Node0x6170f361f8c0[style=solid];
	Node0x6170f361f500 [shape=record,color=black,label="{NodeID: 9\nIntraBlockNode ID: 9      store i32 1, i32* %y, align 4, !dbg !24 \{ ln: 10  cl: 11  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f361f500 -> Node0x6170f361f6e0[style=solid];
	Node0x6170f361f380 [shape=record,color=black,label="{NodeID: 8\nIntraBlockNode ID: 8      store i32 1, i32* %x, align 4, !dbg !23 \{ ln: 10  cl: 6  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f361f380 -> Node0x6170f361f500[style=solid];
	Node0x6170f361f260 [shape=record,color=black,label="{NodeID: 7\nIntraBlockNode ID: 7      store i32 %b, i32* %b.addr, align 4 \{  \}    \{fun: test\}}"];
	Node0x6170f361f260 -> Node0x6170f361f380[style=solid];
	Node0x6170f361f140 [shape=record,color=black,label="{NodeID: 6\nIntraBlockNode ID: 6      store i32 %a, i32* %a.addr, align 4 \{  \}    \{fun: test\}}"];
	Node0x6170f361f140 -> Node0x6170f361f260[style=solid];
	Node0x6170f361f020 [shape=record,color=black,label="{NodeID: 5\nIntraBlockNode ID: 5   AddrPE: [15\<--16]  \n   %y = alloca i32, align 4 \{ ln: 9 fl: example.c \} \{fun: test\}}"];
	Node0x6170f361f020 -> Node0x6170f361f140[style=solid];
	Node0x6170f361ef00 [shape=record,color=black,label="{NodeID: 4\nIntraBlockNode ID: 4   AddrPE: [13\<--14]  \n   %x = alloca i32, align 4 \{ ln: 9 fl: example.c \} \{fun: test\}}"];
	Node0x6170f361ef00 -> Node0x6170f361f020[style=solid];
	Node0x6170f361ede0 [shape=record,color=black,label="{NodeID: 3\nIntraBlockNode ID: 3   AddrPE: [11\<--12]  \n   %b.addr = alloca i32, align 4 \{ ln: 8 fl: example.c \} \{fun: test\}}"];
	Node0x6170f361ede0 -> Node0x6170f361ef00[style=solid];
	Node0x6170f361ec20 [shape=record,color=black,label="{NodeID: 2\nIntraBlockNode ID: 2   AddrPE: [9\<--10]  \n   %a.addr = alloca i32, align 4 \{ ln: 8 fl: example.c \} \{fun: test\}}"];
	Node0x6170f361ec20 -> Node0x6170f361ede0[style=solid];
	Node0x6170f361eb30 [shape=record,color=yellow,label="{NodeID: 1\nFunEntryBlockNode ID: 1 Entry(\{ in line: 8 file: example.c \})\n \{fun: test\}}"];
	Node0x6170f361eb30 -> Node0x6170f361ec20[style=solid];
	Node0x6170f3610630 [shape=record,color=purple,label="{NodeID: 0\nCopyPE: [2\<--3]  \n i8* null \{ constant data \}AddrPE: [4\<--5]  \n test \{ in line: 8 file: example.c \}AddrPE: [54\<--55]  \n llvm.dbg.declare \{  \}AddrPE: [40\<--41]  \n svf_assert \{  \}AddrPE: [62\<--63]  \n main \{ in line: 23 file: example.c \}}"];
	Node0x6170f361fc80 [shape=record,color=black,label="{NodeID: 13\nIntraBlockNode ID: 13      br i1 %cmp, label %if.then, label %if.else, !dbg !29 \{ ln: 12  cl: 9  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f361fc80 -> Node0x6170f361ff70[style=solid];
	Node0x6170f361fc80 -> Node0x6170f3620130[style=solid];
	Node0x6170f361ff70 [shape=record,color=black,label="{NodeID: 14\nIntraBlockNode ID: 14      %2 = load i32, i32* %x, align 4, !dbg !30 \{ ln: 13  cl: 10  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f361ff70 -> Node0x6170f3620400[style=solid];
	Node0x6170f3620130 [shape=record,color=black,label="{NodeID: 15\nIntraBlockNode ID: 15      %6 = load i32, i32* %x, align 4, !dbg !38 \{ ln: 17  cl: 10  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f3620130 -> Node0x6170f36206d0[style=solid];
	Node0x6170f3620400 [shape=record,color=black,label="{NodeID: 16\nIntraBlockNode ID: 16      %inc = add nsw i32 %2, 1, !dbg !30 \{ ln: 13  cl: 10  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f3620400 -> Node0x6170f36208b0[style=solid];
	Node0x6170f36206d0 [shape=record,color=black,label="{NodeID: 17\nIntraBlockNode ID: 17      %inc3 = add nsw i32 %6, 1, !dbg !38 \{ ln: 17  cl: 10  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f36206d0 -> Node0x6170f3620a90[style=solid];
	Node0x6170f36208b0 [shape=record,color=black,label="{NodeID: 18\nIntraBlockNode ID: 18      store i32 %inc, i32* %x, align 4, !dbg !30 \{ ln: 13  cl: 10  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f36208b0 -> Node0x6170f3620c70[style=solid];
	Node0x6170f3620a90 [shape=record,color=black,label="{NodeID: 19\nIntraBlockNode ID: 19      store i32 %inc3, i32* %x, align 4, !dbg !38 \{ ln: 17  cl: 10  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f3620a90 -> Node0x6170f3620e50[style=solid];
	Node0x6170f3620c70 [shape=record,color=black,label="{NodeID: 20\nIntraBlockNode ID: 20      %3 = load i32, i32* %y, align 4, !dbg !32 \{ ln: 14  cl: 10  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f3620c70 -> Node0x6170f3621030[style=solid];
	Node0x6170f3620e50 [shape=record,color=black,label="{NodeID: 21\nIntraBlockNode ID: 21      %7 = load i32, i32* %x, align 4, !dbg !40 \{ ln: 18  cl: 21  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f3620e50 -> Node0x6170f3621210[style=solid];
	Node0x6170f3621030 [shape=record,color=black,label="{NodeID: 22\nIntraBlockNode ID: 22      %inc1 = add nsw i32 %3, 1, !dbg !32 \{ ln: 14  cl: 10  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f3621030 -> Node0x6170f36213f0[style=solid];
	Node0x6170f3621210 [shape=record,color=black,label="{NodeID: 23\nIntraBlockNode ID: 23      %cmp4 = icmp eq i32 %7, 2, !dbg !41 \{ ln: 18  cl: 23  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f3621210 -> Node0x6170f3610750[style=solid];
	Node0x6170f36213f0 [shape=record,color=black,label="{NodeID: 24\nIntraBlockNode ID: 24      store i32 %inc1, i32* %y, align 4, !dbg !32 \{ ln: 14  cl: 10  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f36213f0 -> Node0x6170f36218e0[style=solid];
	Node0x6170f3610750 [shape=record,color=red,label="{NodeID: 25\nCallBlockNode ID: 25   call void @svf_assert(i1 noundef zeroext %cmp4), !dbg !42 \{ ln: 18  cl: 9  fl: example.c \} \{fun: test\}|{|<s1>0x6170f360dc60}}"];
	Node0x6170f3610750 -> Node0x6170f3621be0[style=solid];
	Node0x6170f3610750:s1 -> Node0x6170f3621630[style=solid,color=red];
	Node0x6170f3621630 [shape=record,color=yellow,label="{NodeID: 26\nFunEntryBlockNode ID: 26 Entry()\n \{fun: svf_assert\}}"];
	Node0x6170f36218e0 [shape=record,color=black,label="{NodeID: 27\nIntraBlockNode ID: 27      %4 = load i32, i32* %x, align 4, !dbg !33 \{ ln: 15  cl: 21  fl: example.c \}    \{fun: test\}}"];
	Node0x6170f36218e0 -> Node0x6170f3622050[style=solid];
	Node0x6170f3621ac0 [shape=record,color=black,label="{NodeID: 28\nIntraBlockNode ID: 28      br label %if.end \{  \}    \{fun: test\}}"];
	Node0x6170f3621ac0 -> Node0x6170f3622230[style=solid];
}
