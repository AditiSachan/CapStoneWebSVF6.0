digraph "ICFG" {
	label="ICFG";

	Node0x574d74073560 [shape=record,color=green,label="{NodeID: 49\nFunExitBlockNode ID: 49 Exit(\{  \})\n \{fun: main\}}"];
	Node0x574d74073300 [shape=record,color=black,label="{NodeID: 48\nIntraBlockNode ID: 48      ret i32 0, !dbg !22 \{ ln: 27  cl: 5  fl: example.c \}    \{fun: main\}}"];
	Node0x574d74073300 -> Node0x574d74073560[style=solid];
	Node0x574d740730a0 [shape=record,color=blue,label="{NodeID: 47\nRetBlockNode ID: 47   %call = call i32 @test(i32 noundef %0, i32 noundef %1), !dbg !21 \{ ln: 26  cl: 5  fl: example.c \} \{fun: main\}}"];
	Node0x574d740730a0 -> Node0x574d74073300[style=solid];
	Node0x574d7405fad0 [shape=record,color=red,label="{NodeID: 46\nCallBlockNode ID: 46   %call = call i32 @test(i32 noundef %0, i32 noundef %1), !dbg !21 \{ ln: 26  cl: 5  fl: example.c \} \{fun: main\}|{|<s1>0x574d7405f0d0}}"];
	Node0x574d7405fad0 -> Node0x574d740730a0[style=solid];
	Node0x574d7405fad0:s1 -> Node0x574d7406db20[style=solid,color=red];
	Node0x574d74072df0 [shape=record,color=black,label="{NodeID: 45\nIntraBlockNode ID: 45      %1 = load i32, i32* %b, align 4, !dbg !20 \{ ln: 26  cl: 12  fl: example.c \}    \{fun: main\}}"];
	Node0x574d74072df0 -> Node0x574d7405fad0[style=solid];
	Node0x574d74072c30 [shape=record,color=black,label="{NodeID: 44\nIntraBlockNode ID: 44      %0 = load i32, i32* %a, align 4, !dbg !19 \{ ln: 26  cl: 10  fl: example.c \}    \{fun: main\}}"];
	Node0x574d74072c30 -> Node0x574d74072df0[style=solid];
	Node0x574d74072a70 [shape=record,color=black,label="{NodeID: 43\nIntraBlockNode ID: 43      store i32 2, i32* %b, align 4, !dbg !18 \{ ln: 25  cl: 9  fl: example.c \}    \{fun: main\}}"];
	Node0x574d74072a70 -> Node0x574d74072c30[style=solid];
	Node0x574d740728b0 [shape=record,color=black,label="{NodeID: 42\nIntraBlockNode ID: 42      store i32 1, i32* %a, align 4, !dbg !16 \{ ln: 24  cl: 9  fl: example.c \}    \{fun: main\}}"];
	Node0x574d740728b0 -> Node0x574d74072a70[style=solid];
	Node0x574d740726f0 [shape=record,color=black,label="{NodeID: 41\nIntraBlockNode ID: 41      store i32 0, i32* %retval, align 4 \{  \}    \{fun: main\}}"];
	Node0x574d740726f0 -> Node0x574d740728b0[style=solid];
	Node0x574d74072530 [shape=record,color=black,label="{NodeID: 40\nIntraBlockNode ID: 40   AddrPE: [69\<--70]  \n   %b = alloca i32, align 4 \{ ln: 25 fl: example.c \} \{fun: main\}}"];
	Node0x574d74072530 -> Node0x574d740726f0[style=solid];
	Node0x574d74072370 [shape=record,color=black,label="{NodeID: 39\nIntraBlockNode ID: 39   AddrPE: [67\<--68]  \n   %a = alloca i32, align 4 \{ ln: 24 fl: example.c \} \{fun: main\}}"];
	Node0x574d74072370 -> Node0x574d74072530[style=solid];
	Node0x574d74072140 [shape=record,color=black,label="{NodeID: 38\nIntraBlockNode ID: 38   AddrPE: [65\<--66]  \n   %retval = alloca i32, align 4 \{  \} \{fun: main\}}"];
	Node0x574d74072140 -> Node0x574d74072370[style=solid];
	Node0x574d74072010 [shape=record,color=yellow,label="{NodeID: 37\nFunEntryBlockNode ID: 37 Entry(\{ in line: 23 file: example.c \})\n \{fun: main\}}"];
	Node0x574d74072010 -> Node0x574d7405f640[style=solid];
	Node0x574d74072010 -> Node0x574d74072140[style=solid];
	Node0x574d74071c60 [shape=record,color=blue,label="{NodeID: 36\nRetBlockNode ID: 36   call void @svf_assert(i1 noundef zeroext %cmp2), !dbg !36 \{ ln: 15  cl: 9  fl: example.c \} \{fun: test\}}"];
	Node0x574d74071c60 -> Node0x574d74071b40[style=solid];
	Node0x574d74071b40 [shape=record,color=black,label="{NodeID: 35\nIntraBlockNode ID: 35      br label %if.end, !dbg !37 \{ ln: 16  cl: 5  fl: example.c \}    \{fun: test\}}"];
	Node0x574d74071b40 -> Node0x574d74071220[style=solid];
	Node0x574d7405fbe0 [shape=record,color=red,label="{NodeID: 34\nCallBlockNode ID: 34   call void @svf_assert(i1 noundef zeroext %cmp2), !dbg !36 \{ ln: 15  cl: 9  fl: example.c \} \{fun: test\}|{|<s1>0x574d7405bb90}}"];
	Node0x574d7405fbe0 -> Node0x574d74071c60[style=solid];
	Node0x574d7405fbe0:s1 -> Node0x574d74070620[style=solid,color=red];
	Node0x574d740715e0 [shape=record,color=green,label="{NodeID: 33\nFunExitBlockNode ID: 33 Exit(\{ ln: 20  cl: 5  fl: example.c \})\n \{fun: test\}|{<s0>0x574d7405f0d0}}"];
	Node0x574d740715e0:s0 -> Node0x574d740730a0[style=solid,color=blue];
	Node0x574d74071400 [shape=record,color=black,label="{NodeID: 32\nIntraBlockNode ID: 32      %cmp2 = icmp eq i32 %4, %5, !dbg !35 \{ ln: 15  cl: 23  fl: example.c \}    \{fun: test\}}"];
	Node0x574d74071400 -> Node0x574d7405fbe0[style=solid];
	Node0x574d74071220 [shape=record,color=black,label="{NodeID: 31\nIntraBlockNode ID: 31      ret i32 0, !dbg !43 \{ ln: 20  cl: 5  fl: example.c \}    \{fun: test\}}"];
	Node0x574d74071220 -> Node0x574d740715e0[style=solid];
	Node0x574d74071040 [shape=record,color=black,label="{NodeID: 30\nIntraBlockNode ID: 30      %5 = load i32, i32* %y, align 4, !dbg !34 \{ ln: 15  cl: 26  fl: example.c \}    \{fun: test\}}"];
	Node0x574d74071040 -> Node0x574d74071400[style=solid];
	Node0x574d74070bd0 [shape=record,color=blue,label="{NodeID: 29\nRetBlockNode ID: 29   call void @svf_assert(i1 noundef zeroext %cmp4), !dbg !42 \{ ln: 18  cl: 9  fl: example.c \} \{fun: test\}}"];
	Node0x574d74070bd0 -> Node0x574d74070ab0[style=solid];
	Node0x574d7406ea90 [shape=record,color=black,label="{NodeID: 12\nIntraBlockNode ID: 12      %cmp = icmp sgt i32 %0, %1, !dbg !28 \{ ln: 12  cl: 11  fl: example.c \}    \{fun: test\}}"];
	Node0x574d7406ea90 -> Node0x574d7406ec70[style=solid];
	Node0x574d7406e8b0 [shape=record,color=black,label="{NodeID: 11\nIntraBlockNode ID: 11      %1 = load i32, i32* %b.addr, align 4, !dbg !27 \{ ln: 12  cl: 13  fl: example.c \}    \{fun: test\}}"];
	Node0x574d7406e8b0 -> Node0x574d7406ea90[style=solid];
	Node0x574d7406e6d0 [shape=record,color=black,label="{NodeID: 10\nIntraBlockNode ID: 10      %0 = load i32, i32* %a.addr, align 4, !dbg !25 \{ ln: 12  cl: 9  fl: example.c \}    \{fun: test\}}"];
	Node0x574d7406e6d0 -> Node0x574d7406e8b0[style=solid];
	Node0x574d7406e4f0 [shape=record,color=black,label="{NodeID: 9\nIntraBlockNode ID: 9      store i32 1, i32* %y, align 4, !dbg !24 \{ ln: 10  cl: 11  fl: example.c \}    \{fun: test\}}"];
	Node0x574d7406e4f0 -> Node0x574d7406e6d0[style=solid];
	Node0x574d7406e370 [shape=record,color=black,label="{NodeID: 8\nIntraBlockNode ID: 8      store i32 1, i32* %x, align 4, !dbg !23 \{ ln: 10  cl: 6  fl: example.c \}    \{fun: test\}}"];
	Node0x574d7406e370 -> Node0x574d7406e4f0[style=solid];
	Node0x574d7406e250 [shape=record,color=black,label="{NodeID: 7\nIntraBlockNode ID: 7      store i32 %b, i32* %b.addr, align 4 \{  \}    \{fun: test\}}"];
	Node0x574d7406e250 -> Node0x574d7406e370[style=solid];
	Node0x574d7406e130 [shape=record,color=black,label="{NodeID: 6\nIntraBlockNode ID: 6      store i32 %a, i32* %a.addr, align 4 \{  \}    \{fun: test\}}"];
	Node0x574d7406e130 -> Node0x574d7406e250[style=solid];
	Node0x574d7406e010 [shape=record,color=black,label="{NodeID: 5\nIntraBlockNode ID: 5   AddrPE: [15\<--16]  \n   %y = alloca i32, align 4 \{ ln: 9 fl: example.c \} \{fun: test\}}"];
	Node0x574d7406e010 -> Node0x574d7406e130[style=solid];
	Node0x574d7406def0 [shape=record,color=black,label="{NodeID: 4\nIntraBlockNode ID: 4   AddrPE: [13\<--14]  \n   %x = alloca i32, align 4 \{ ln: 9 fl: example.c \} \{fun: test\}}"];
	Node0x574d7406def0 -> Node0x574d7406e010[style=solid];
	Node0x574d7406ddd0 [shape=record,color=black,label="{NodeID: 3\nIntraBlockNode ID: 3   AddrPE: [11\<--12]  \n   %b.addr = alloca i32, align 4 \{ ln: 8 fl: example.c \} \{fun: test\}}"];
	Node0x574d7406ddd0 -> Node0x574d7406def0[style=solid];
	Node0x574d7406dc10 [shape=record,color=black,label="{NodeID: 2\nIntraBlockNode ID: 2   AddrPE: [9\<--10]  \n   %a.addr = alloca i32, align 4 \{ ln: 8 fl: example.c \} \{fun: test\}}"];
	Node0x574d7406dc10 -> Node0x574d7406ddd0[style=solid];
	Node0x574d7406db20 [shape=record,color=yellow,label="{NodeID: 1\nFunEntryBlockNode ID: 1 Entry(\{ in line: 8 file: example.c \})\n \{fun: test\}}"];
	Node0x574d7406db20 -> Node0x574d7406dc10[style=solid];
	Node0x574d7405f640 [shape=record,color=purple,label="{NodeID: 0\nCopyPE: [2\<--3]  \n i8* null \{ constant data \}AddrPE: [4\<--5]  \n test \{ in line: 8 file: example.c \}AddrPE: [54\<--55]  \n llvm.dbg.declare \{  \}AddrPE: [40\<--41]  \n svf_assert \{  \}AddrPE: [62\<--63]  \n main \{ in line: 23 file: example.c \}}"];
	Node0x574d7406ec70 [shape=record,color=black,label="{NodeID: 13\nIntraBlockNode ID: 13      br i1 %cmp, label %if.then, label %if.else, !dbg !29 \{ ln: 12  cl: 9  fl: example.c \}    \{fun: test\}}"];
	Node0x574d7406ec70 -> Node0x574d7406ef60[style=solid];
	Node0x574d7406ec70 -> Node0x574d7406f120[style=solid];
	Node0x574d7406ef60 [shape=record,color=black,label="{NodeID: 14\nIntraBlockNode ID: 14      %2 = load i32, i32* %x, align 4, !dbg !30 \{ ln: 13  cl: 10  fl: example.c \}    \{fun: test\}}"];
	Node0x574d7406ef60 -> Node0x574d7406f3f0[style=solid];
	Node0x574d7406f120 [shape=record,color=black,label="{NodeID: 15\nIntraBlockNode ID: 15      %6 = load i32, i32* %x, align 4, !dbg !38 \{ ln: 17  cl: 10  fl: example.c \}    \{fun: test\}}"];
	Node0x574d7406f120 -> Node0x574d7406f6c0[style=solid];
	Node0x574d7406f3f0 [shape=record,color=black,label="{NodeID: 16\nIntraBlockNode ID: 16      %inc = add nsw i32 %2, 1, !dbg !30 \{ ln: 13  cl: 10  fl: example.c \}    \{fun: test\}}"];
	Node0x574d7406f3f0 -> Node0x574d7406f8a0[style=solid];
	Node0x574d7406f6c0 [shape=record,color=black,label="{NodeID: 17\nIntraBlockNode ID: 17      %inc3 = add nsw i32 %6, 1, !dbg !38 \{ ln: 17  cl: 10  fl: example.c \}    \{fun: test\}}"];
	Node0x574d7406f6c0 -> Node0x574d7406fa80[style=solid];
	Node0x574d7406f8a0 [shape=record,color=black,label="{NodeID: 18\nIntraBlockNode ID: 18      store i32 %inc, i32* %x, align 4, !dbg !30 \{ ln: 13  cl: 10  fl: example.c \}    \{fun: test\}}"];
	Node0x574d7406f8a0 -> Node0x574d7406fc60[style=solid];
	Node0x574d7406fa80 [shape=record,color=black,label="{NodeID: 19\nIntraBlockNode ID: 19      store i32 %inc3, i32* %x, align 4, !dbg !38 \{ ln: 17  cl: 10  fl: example.c \}    \{fun: test\}}"];
	Node0x574d7406fa80 -> Node0x574d7406fe40[style=solid];
	Node0x574d7406fc60 [shape=record,color=black,label="{NodeID: 20\nIntraBlockNode ID: 20      %3 = load i32, i32* %y, align 4, !dbg !32 \{ ln: 14  cl: 10  fl: example.c \}    \{fun: test\}}"];
	Node0x574d7406fc60 -> Node0x574d74070020[style=solid];
	Node0x574d7406fe40 [shape=record,color=black,label="{NodeID: 21\nIntraBlockNode ID: 21      %7 = load i32, i32* %x, align 4, !dbg !40 \{ ln: 18  cl: 21  fl: example.c \}    \{fun: test\}}"];
	Node0x574d7406fe40 -> Node0x574d74070200[style=solid];
	Node0x574d74070020 [shape=record,color=black,label="{NodeID: 22\nIntraBlockNode ID: 22      %inc1 = add nsw i32 %3, 1, !dbg !32 \{ ln: 14  cl: 10  fl: example.c \}    \{fun: test\}}"];
	Node0x574d74070020 -> Node0x574d740703e0[style=solid];
	Node0x574d74070200 [shape=record,color=black,label="{NodeID: 23\nIntraBlockNode ID: 23      %cmp4 = icmp eq i32 %7, 2, !dbg !41 \{ ln: 18  cl: 23  fl: example.c \}    \{fun: test\}}"];
	Node0x574d74070200 -> Node0x574d7405f760[style=solid];
	Node0x574d740703e0 [shape=record,color=black,label="{NodeID: 24\nIntraBlockNode ID: 24      store i32 %inc1, i32* %y, align 4, !dbg !32 \{ ln: 14  cl: 10  fl: example.c \}    \{fun: test\}}"];
	Node0x574d740703e0 -> Node0x574d740708d0[style=solid];
	Node0x574d7405f760 [shape=record,color=red,label="{NodeID: 25\nCallBlockNode ID: 25   call void @svf_assert(i1 noundef zeroext %cmp4), !dbg !42 \{ ln: 18  cl: 9  fl: example.c \} \{fun: test\}|{|<s1>0x574d7405cc70}}"];
	Node0x574d7405f760 -> Node0x574d74070bd0[style=solid];
	Node0x574d7405f760:s1 -> Node0x574d74070620[style=solid,color=red];
	Node0x574d74070620 [shape=record,color=yellow,label="{NodeID: 26\nFunEntryBlockNode ID: 26 Entry()\n \{fun: svf_assert\}}"];
	Node0x574d740708d0 [shape=record,color=black,label="{NodeID: 27\nIntraBlockNode ID: 27      %4 = load i32, i32* %x, align 4, !dbg !33 \{ ln: 15  cl: 21  fl: example.c \}    \{fun: test\}}"];
	Node0x574d740708d0 -> Node0x574d74071040[style=solid];
	Node0x574d74070ab0 [shape=record,color=black,label="{NodeID: 28\nIntraBlockNode ID: 28      br label %if.end \{  \}    \{fun: test\}}"];
	Node0x574d74070ab0 -> Node0x574d74071220[style=solid];
}
